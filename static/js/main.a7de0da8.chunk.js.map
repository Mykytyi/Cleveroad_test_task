{"version":3,"sources":["reducers/initialState.js","reducers/index.js","reducers/todo.js","components/Location/Location.js","components/Location/LocationContainer.js","components/CurrentTime/CurrentTime.js","components/Map/MapContainer.js","components/Map/Map.js","components/Crew/CrewMember.js","components/Crew/Crew.js","containers/ShowMap.js","App.js","serviceWorker.js","index.js"],"names":["initialState","longitude","latitude","rootReducer","combineReducers","todo","state","arguments","length","undefined","action","type","Object","objectSpread","Location","_this","this","requestForData","setInterval","_this2","fetch","then","response","text","result","JSON","parse","obj","lon","iss_position","lat","props","changeData","_this$props","react_default","a","createElement","className","Component","LocationContainer","connect","dispatch","lng","CurrentTime","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","time","nameOfDay","day","date","handlingDate","Date","hour","getUTCHours","minutes","getUTCMinutes","getUTCDay","setState","concat","getUTCDate","getUTCMonth","getFullYear","_this$state","MapContainer","lib","defaultZoom","defaultCenter","position","CrewMember","name","Crew","crewArr","amountOfCrew","getData","people","number","console","log","map","elem","i","Crew_CrewMember","key","WrappedMap","withScriptjs","withGoogleMap","ShowMap","Fragment","Location_LocationContainer","components_CurrentTime_CurrentTime","googleMapURL","loadingElement","style","height","containerElement","mapElement","components_Crew_Crew","store","createStore","applyMiddleware","thunk","App","es","src_containers_ShowMap","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7de0da8.chunk.js","sourcesContent":["export const initialState = {\r\n  longitude: '13.234',\r\n  latitude: '-43.123'\r\n};","import { combineReducers } from \"redux\";\r\nimport { todo } from './todo';\r\n\r\nexport const rootReducer = combineReducers({todo});","import { initialState } from './initialState';\r\n\r\nexport function todo(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'ChangeData':\r\n      return {\r\n        ...state,\r\n        longitude: action.longitude,\r\n        latitude: action.latitude\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport './Location.css';\r\n\r\nclass Location extends Component {\r\n  componentDidMount() {\r\n    this.requestForData();\r\n    setInterval(() => this.requestForData(), 5000);\r\n  }\r\n\r\n  requestForData() {\r\n    const promise = fetch('https://cors-anywhere.herokuapp.com/http://api.open-notify.org/iss-now.json');\r\n\r\n    promise.then(response => response.text())\r\n      .then(result => {\r\n        return JSON.parse(result);\r\n      })\r\n      .then(obj => {\r\n          let lon = obj.iss_position.longitude;\r\n          let lat = obj.iss_position.latitude;\r\n          this.props.changeData(lon, lat);\r\n          return true;\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { longitude, latitude } = this.props;\r\n    return (\r\n      <div className=\"location\">\r\n        <p className=\"title\">ISS is now located at:</p>\r\n        <p className=\"data\">longitude: {longitude},</p>\r\n        <p className=\"data\">latitude: {latitude}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Location;","import { connect } from 'react-redux';\r\nimport Location from './Location';\r\n\r\nfunction changeData(lng, lat) {\r\n  return {\r\n    type: 'ChangeData',\r\n    latitude: lat,\r\n    longitude: lng\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    longitude: state.todo.longitude,\r\n    latitude: state.todo.latitude\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    changeData: (lon, lat) => dispatch(changeData(lon, lat))\r\n  };\r\n};\r\n\r\nconst LocationContainer = connect(mapStateToProps, mapDispatchToProps)(Location);\r\n\r\nexport default LocationContainer;","import React, {Component} from 'react';\r\nimport './CurrentTime.css';\r\n\r\nclass CurrentTime extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: '00:00',\r\n      nameOfDay: 'Monday',\r\n      day: '1',\r\n      date: '1 Apr 1946'\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handlingDate();\r\n    setInterval(() => {this.handlingDate()}, 5000);\r\n  }\r\n\r\n  handlingDate() {\r\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n      \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"\r\n    ];\r\n    let date = new Date();\r\n    let hour = date.getUTCHours();\r\n    let minutes = date.getUTCMinutes();\r\n\r\n    switch (date.getUTCDay()) {\r\n      case 1:\r\n        this.setState({nameOfDay: 'Monday'});\r\n        break;\r\n      case 2:\r\n        this.setState({nameOfDay: 'Tuesday'});\r\n        break;\r\n      case 3:\r\n        this.setState({nameOfDay: 'Wednesday'});\r\n        break;\r\n      case 4:\r\n        this.setState({nameOfDay: 'Thursday'});\r\n        break;\r\n      case 5:\r\n        this.setState({nameOfDay: 'Friday'});\r\n        break;\r\n      case 6:\r\n        this.setState({nameOfDay: 'Saturday'});\r\n        break;\r\n      case 7:\r\n        this.setState({nameOfDay: 'Sunday'});\r\n        break;\r\n    }//Определяем день недели\r\n    this.setState({day: `${date.getUTCDate()}`});\r\n    this.setState({date: `${monthNames[date.getUTCMonth()]} ${date.getFullYear()}`});\r\n    this.setState({time: `${hour}:${minutes}`});\r\n  }\r\n\r\n\r\n  render() {\r\n    const { time, nameOfDay, day, date } = this.state;\r\n\r\n    return (\r\n      <div className=\"currentTime\">\r\n        <p className=\"currentTime_title\">Current UTC time: {time}</p>\r\n        <p className=\"currentTime_date\">{nameOfDay}, {day} {date}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentTime;","import { connect } from 'react-redux';\r\nimport Map from './Map';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    longitude: state.todo.longitude,\r\n    latitude: state.todo.latitude\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n  };\r\n};\r\n\r\nconst MapContainer = connect(mapStateToProps, mapDispatchToProps)(Map);\r\n\r\nexport default MapContainer;\r\n","import React from 'react';\r\nimport { GoogleMap, Marker } from 'react-google-maps';\r\n\r\nexport default function Map(props) {\r\n  return (\r\n    <div>\r\n      <GoogleMap defaultZoom={2} defaultCenter={{lat: +props.latitude, lng: +props.longitude}}>\r\n        <Marker position={{lat: +props.latitude, lng: +props.longitude}}/>\r\n      </GoogleMap>\r\n    </div>\r\n  );\r\n}\r\n\r\n//AIzaSyCe-uJyatwNz62d2NbgV25ArN0AzIdYiFw","import React from 'react';\r\nimport './CrewMember.css';\r\n\r\nfunction CrewMember(props) {\r\n  return (\r\n    <li className=\"rocketMember\">\r\n      <span className=\"rocketMember_avatar\"></span>\r\n      <p className=\"rocketMember_name\">{props.name}</p>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default CrewMember;","import React, {Component} from 'react';\r\nimport './Crew.css';\r\nimport CrewMember from './CrewMember';\r\n\r\nclass Crew extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      crewArr: [],\r\n      amountOfCrew: 0\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  getData() {\r\n    let promise = fetch('https://cors-anywhere.herokuapp.com/http://api.open-notify.org/astros.json');\r\n\r\n    promise.then(response => response.text())\r\n      .then(result => JSON.parse(result))\r\n      .then(obj => {\r\n        this.setState({crewArr: obj.people, amountOfCrew: obj.number});\r\n        return true;\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { amountOfCrew, crewArr } = this.state;\r\n    console.log(crewArr);\r\n    return (\r\n      <div className=\"Crew\">\r\n        <section className=\"Crew_astronauts_field\">\r\n        <ul className=\"Crew_astronauts_list\">\r\n          {crewArr.map((elem, i) => (\r\n            <CrewMember key={i} className=\"crewMember\" name={elem.name}/>\r\n          ))}\r\n        </ul>\r\n        </section>\r\n        <section className=\"Crew_astronauts_amount_field\">\r\n          <p className=\"Crew_astronaut_amount_field_text\">Total amount: {amountOfCrew} people on ISS</p>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Crew;","import React, {Component} from 'react';\r\nimport LocationContainer from '../components/Location/LocationContainer';\r\nimport CurrentTime from '../components/CurrentTime/CurrentTime';\r\nimport MapContainer from '../components/Map/MapContainer';\r\nimport Crew from '../components/Crew/Crew';\r\nimport { withScriptjs, withGoogleMap } from 'react-google-maps';\r\n\r\nimport './ShowMap.css';\r\n\r\nconst WrappedMap = withScriptjs(withGoogleMap(MapContainer));\r\n\r\nclass ShowMap extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"wrap\">\r\n          <div className=\"showMap-wrapper\">\r\n            <LocationContainer/>\r\n            <CurrentTime/>\r\n            <WrappedMap\r\n              googleMapURL={'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=AIzaSyA8OJeRiEf959PDJkE60mjI54YSrdNlitk'}\r\n              loadingElement={<div style={{ height: `100%` }} />}\r\n              containerElement={<div style={{ height: `100%` }} />}\r\n              mapElement={<div style={{ height: `100%` }} />}/>\r\n            <Crew/>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowMap;","import React from 'react';\nimport './App.css';\nimport {rootReducer} from './reducers/index';\nimport {applyMiddleware, createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from \"redux-thunk\";\n\nimport ShowMap from './containers/ShowMap';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ShowMap />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}